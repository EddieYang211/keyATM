// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// keyATM_fit_basic
List keyATM_fit_basic(List model, int iter, int output_per);
RcppExport SEXP _keyATM_keyATM_fit_basic(SEXP modelSEXP, SEXP iterSEXP, SEXP output_perSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type output_per(output_perSEXP);
    rcpp_result_gen = Rcpp::wrap(keyATM_fit_basic(model, iter, output_per));
    return rcpp_result_gen;
END_RCPP
}
// keyATM_fit_cov
List keyATM_fit_cov(List model, int iter, int output_per);
RcppExport SEXP _keyATM_keyATM_fit_cov(SEXP modelSEXP, SEXP iterSEXP, SEXP output_perSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type output_per(output_perSEXP);
    rcpp_result_gen = Rcpp::wrap(keyATM_fit_cov(model, iter, output_per));
    return rcpp_result_gen;
END_RCPP
}
// keyATM_fit_HMM
List keyATM_fit_HMM(List model, int iter, int output_per);
RcppExport SEXP _keyATM_keyATM_fit_HMM(SEXP modelSEXP, SEXP iterSEXP, SEXP output_perSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type output_per(output_perSEXP);
    rcpp_result_gen = Rcpp::wrap(keyATM_fit_HMM(model, iter, output_per));
    return rcpp_result_gen;
END_RCPP
}
// keyATM_fit_LDA
List keyATM_fit_LDA(List model, int iter, int output_per);
RcppExport SEXP _keyATM_keyATM_fit_LDA(SEXP modelSEXP, SEXP iterSEXP, SEXP output_perSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type output_per(output_perSEXP);
    rcpp_result_gen = Rcpp::wrap(keyATM_fit_LDA(model, iter, output_per));
    return rcpp_result_gen;
END_RCPP
}
// keyATM_fit_LDAcov
List keyATM_fit_LDAcov(List model, int iter, int output_per);
RcppExport SEXP _keyATM_keyATM_fit_LDAcov(SEXP modelSEXP, SEXP iterSEXP, SEXP output_perSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type output_per(output_perSEXP);
    rcpp_result_gen = Rcpp::wrap(keyATM_fit_LDAcov(model, iter, output_per));
    return rcpp_result_gen;
END_RCPP
}
// keyATM_fit_LDAHMM
List keyATM_fit_LDAHMM(List model, int iter, int output_per);
RcppExport SEXP _keyATM_keyATM_fit_LDAHMM(SEXP modelSEXP, SEXP iterSEXP, SEXP output_perSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< int >::type output_per(output_perSEXP);
    rcpp_result_gen = Rcpp::wrap(keyATM_fit_LDAHMM(model, iter, output_per));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_keyATM_keyATM_fit_basic", (DL_FUNC) &_keyATM_keyATM_fit_basic, 3},
    {"_keyATM_keyATM_fit_cov", (DL_FUNC) &_keyATM_keyATM_fit_cov, 3},
    {"_keyATM_keyATM_fit_HMM", (DL_FUNC) &_keyATM_keyATM_fit_HMM, 3},
    {"_keyATM_keyATM_fit_LDA", (DL_FUNC) &_keyATM_keyATM_fit_LDA, 3},
    {"_keyATM_keyATM_fit_LDAcov", (DL_FUNC) &_keyATM_keyATM_fit_LDAcov, 3},
    {"_keyATM_keyATM_fit_LDAHMM", (DL_FUNC) &_keyATM_keyATM_fit_LDAHMM, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_keyATM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
